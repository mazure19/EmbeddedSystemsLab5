/* --COPYRIGHT--,BSD
 * Copyright (c) 2018, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * --/COPYRIGHT--*/
//******************************************************************************
//
//  lightsensor.c
//
//  Uses SAC2 in generic Op-Amp mode along with onboard photodiode, capacitor, and 
//  resistor to implement a light sensor circuit. The resulting voltage is buffered
//  through SAC0, measured by the internal ADC, and used to control Timer PWMs
//  dutycycle to modulate the brightness of LED1 and LED2.
//
//  E. Chen
//  Texas Instruments Inc.
//  May 2018
//******************************************************************************

/*
 * This program is edited in register format for some originality, the given driver functions from the original code
 * were translated into the register level commands.
 */

#include "driverlib.h"
#include "lightsensor.h"

int led1_dutycycle = 0;
int led2_dutycycle = 0;
int calibratedADC = 500;
int period = 100;
int counter = 0;
int deadzone = 5;
int runningAvg = 500;

/* FRAM Variable that stores lightsensor ADC results*/
#if defined(__TI_COMPILER_VERSION__)
#pragma PERSISTENT(lightsensor_ADC_Result)
#elif defined(__IAR_SYSTEMS_ICC__)
__persistent
#endif
unsigned int lightsensor_ADC_Result = 0;          // ADC conversion result

void lightsensor() {
    /* Initialize peripherals */
    lightsensor_init_GPIO();
    lightsensor_init_LED_PWM();
    lightsensor_init_SACOA();
    lightsensor_init_ADC();

    while(mode == LIGHTSENSOR_MODE){
        __bis_SR_register(LPM0_bits + GIE);

        runningAvg = (( runningAvg * 9 ) + lightsensor_ADC_Result)/10;
        int diff = (runningAvg - calibratedADC)/4;

        if (diff < deadzone) {
            diff *= -1;
            led1_dutycycle = diff - deadzone;
            led2_dutycycle = 0;
        }
        else if (diff > deadzone) {
            led1_dutycycle = 0;
            led2_dutycycle = diff - deadzone;
        }
        else {
            led1_dutycycle = 0;
            led2_dutycycle = 0;
        }
    }
}

void lightsensor_init_GPIO(void) {
    //Set Px.x to output direction

    P1DIR |= 0xFF;
    P1OUT = 0x00;

    P3DIR |= 0xFF;
    P3OUT = 0x00;

    P6DIR |= 0xFF;
    P6OUT = 0x00;

    //Set P4.1 (S1) to input
    P4DIR &= (~BIT1);
    P4OUT |= BIT1;
    P4REN |= BIT1;
    P4IES |= BIT1;

    P4IFG &= ~BIT1;
    P4IE |= BIT1;
}

/* Configure TimerB0 to generate PWM on LEDs */
void lightsensor_init_LED_PWM(void) {
    //Start timer
    TB0CTL &= ~(TBSSEL__INCLK + MC_3 + TBCLR + TBIE + CNTL_3); // Clear
    TB0EX0 &= ~TBIDEX_7;
    TB0EX0 |= 0x00 & 0x7;
    TB0CTL |= (TBSSEL__ACLK + TBCLR + 0x00 + ((0x00 >> 3) << 6)); // ACLK, Clear
    TB0CTL |= MC_1; // Up mode
    TB0CCTL0 |= CCIE; // Capture compare interrups enabled
    TB0CCR0 = 1; // Period of 1
}

void lightsensor_disable_LED_PWM(void) {
    Timer_B_stop(TIMER_B0_BASE);
}

void lightsensor_init_SACOA(void) {
    //Configure Op-Amp functionality
    P3SEL0 |= BIT1 | BIT3 | BIT2; // Function select port 3 pins 1, 2, 3
    P3SEL1 |= BIT1 | BIT3 | BIT2; // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    SAC2OA &= ~(PSEL1 | PSEL0 | NSEL1 | NSEL0); // Clearing
    // Select external source for both positive and negative inputs
    SAC2OA |= PMUXEN;
    SAC2OA |= NMUXEN;
    // Select low speed and low power mode
    SAC2OA |= OAPM;
    // Enable op amp and smart analog combo 2
    SAC2OA |= OAEN;
    SAC2OA |= SACEN;

    SAC0OA &= ~(PSEL1 | PSEL0 | NSEL1 | NSEL0); // Clearing
    // Select pair OA for positive input and PGA for negative input
    SAC0OA |= PMUXEN | PSEL1;
    SAC0OA |= NMUXEN | NSEL0;
    // Enable op amp and smart analog combo 0
    SAC0OA |= OAEN;
    SAC0OA |= SACEN;                     // Enable SAC0
}

void lightsensor_init_ADC(void) {
    //Initialize the ADC Module

        ADCCTL0 &= ~(ADCON + ADCENC + ADCSC); // Clear
        ADCIE &= 0x0000;  //Reset ALL interrupt enables
        ADCIFG &= 0x0000; //Reset ALL interrupt flags
        // Samplehold source 2, default clock divider, ADC OSC
        ADCCTL1 = (ADCSHS_2) + ((ADCDIV_0 + ADCPDIV_0) & ADCDIV_7) + (ADCSSEL_0);
        // Default pre clock divider, default resolution
        ADCCTL2 = ((ADCDIV_0 + ADCPDIV_0) & ADCPDIV_3) + ADCRES_1;

        //ADC_enable(ADC_BASE);
        // Enable ADC
        ADCCTL0 |= ADCON;

        ADCCTL1 |= ADCSHP;
        ADCCTL0 &= ~(ADCSHT_15 + ADCMSC);
        // Setup sample hold timer for 16 cycles, disable multiple samples
        ADCCTL0 |= (ADCSHT_2) +  (!(ADCMSC));

        ADCCTL2 &= ~(ADCRES); // Clear Resolution
        ADCCTL2 |= (0x20); // Set resolution to 12 bits

        ADCMCTL0 = (ADCINCH_1) + (!(ADCSREF0 + ADCSREF1)) + (!(ADCSREF2));

        ADCIFG &= ~(ADCIFG0); // Clear interrupt flags

        ADCIE |= (ADCIE0); // Enable memory buffer interrupt

        // Setup PWM output, ACLK, upmode, clear, adjustable period and duty cycle
        TB1CTL &= ~(TBSSEL__INCLK + MC_3 + TBCLR + TBIE);
        TB1EX0 &= ~TBIDEX_7;
        TB1EX0 |= 0x00 & 0x7;
        TB1CTL |= (TBSSEL__ACLK + MC_1 + TBCLR +((0x00 >> 3) << 6));
        TB1CCR0 = TIMER_PERIOD;
        TB1CCTL0 &= ~(CCIE + OUTMOD_7);
        TB1CCTL1 |= OUTMOD_2;
        TB1CCR1 = DUTY_CYCLE;

        //Enable and Start the conversion
        //in Single-Channel, Single Conversion Mode
        //ADC_startConversion(ADC_BASE, ADC_REPEATED_SINGLECHANNEL);
        ADCCTL0 &= ~(ADCENC);
        ADCCTL1 &= ~ADCCONSEQ;
        ADCCTL1 |= (ADCCONSEQ_2); // Single conversion mode
        ADCCTL0 |= ADCENC | ADCSC; // Repeated single channel
}

//******************************************************************************
//
//This is the Timer B0 interrupt vector service routine.
//
//******************************************************************************
#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector=TIMER0_B0_VECTOR
__interrupt
#elif defined(__GNUC__)
__attribute__((interrupt(TIMER0_B0_VECTOR)))
#endif
void TIMER0_B0_ISR(void)
{
    counter++;
    if (counter > period)
    {
        counter = 0;
        if (led1_dutycycle > 0) {
            // Set 1.0 high
            P1OUT |= BIT0;
        }
        if (led2_dutycycle > 0) {
            // Set 6.6 high
            P6OUT |= BIT6;
        }
    }

    if (counter == led1_dutycycle)
    {
        // Set 1.0 low
        P1OUT &= ~BIT0;
    }

    if (counter == led2_dutycycle)
    {
        // Set 6.6 low
        P6OUT &= ~BIT6;
    }

}

#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector=PORT4_VECTOR
__interrupt void PORT4_ISR(void)
#elif defined(__GNUC__)
void __attribute__ ((interrupt(PORT4_VECTOR))) PORT_4_ISR (void)
#else
#error Compiler not supported!
#endif
{
    P4IFG &= ~BIT1;                         // Clear P4.1 IFG
    calibratedADC = lightsensor_ADC_Result;
}

